/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ContactSubmission = {
  _id: string;
  _type: "contactSubmission";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  phone?: string;
  email?: string;
  location?: string;
  problemDescription?: string;
  urgency?: "emergency" | "urgent" | "standard" | "non-urgent";
  preferredContactMethod?: "phone" | "email" | "either";
  submissionDate?: string;
  status?: "new" | "contacted" | "scheduled" | "completed" | "cancelled";
  assignedTo?: string;
  notes?: string;
  followUpDate?: string;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  customerName?: string;
  location?: string;
  text?: string;
  rating?: number;
  serviceType?: "wespenbestrijding" | "hoornaarbestrijding" | "preventieve-behandeling" | "general";
  avatar?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  featured?: "featured" | "standard";
  dateReceived?: string;
};

export type Location = {
  _id: string;
  _type: "location";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  region?: string;
  population?: string;
  description?: string;
  localInfo?: string;
  serviceHighlights?: Array<string>;
  nearbyAreas?: Array<string>;
  testimonials?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "testimonial";
  }>;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  localKeywords?: Array<string>;
  metaTitle?: string;
  metaDescription?: string;
  priority?: number;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  price?: string;
  features?: Array<string>;
  status?: "active" | "inactive" | "popular";
  order?: number;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  companyName?: string;
  tagline?: string;
  phoneNumber?: string;
  email?: string;
  address?: string;
  serviceArea?: string;
  availability?: string;
  guaranteeText?: string;
  experienceYears?: number;
  customerCount?: string;
  averageRating?: number;
  defaultMetaTitle?: string;
  defaultMetaDescription?: string;
  socialMediaLinks?: {
    facebook?: string;
    instagram?: string;
    linkedin?: string;
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ContactSubmission | Testimonial | Location | Service | SiteSettings | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: SITE_SETTINGS_QUERY
// Query: *[  _type == "siteSettings"][0]{  _id,  companyName,  tagline,  phoneNumber,  email,  serviceArea,  availability,  guaranteeText,  experienceYears,  customerCount,  averageRating,  defaultMetaTitle,  defaultMetaDescription,  logo,  socialMediaLinks}
export type SITE_SETTINGS_QUERYResult = {
  _id: string;
  companyName: string | null;
  tagline: string | null;
  phoneNumber: string | null;
  email: string | null;
  serviceArea: string | null;
  availability: string | null;
  guaranteeText: string | null;
  experienceYears: number | null;
  customerCount: string | null;
  averageRating: number | null;
  defaultMetaTitle: string | null;
  defaultMetaDescription: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  socialMediaLinks: {
    facebook?: string;
    instagram?: string;
    linkedin?: string;
  } | null;
} | null;
// Variable: HOMEPAGE_CONTENT_QUERY
// Query: *[  _type == "homepageContent"][0]{  _id,  heroTitle,  heroSubtitle,  heroImage,  features[]{    icon,    title,    description  },  problemSectionTitle,  problemParagraphs,  problemTipTitle,  problemTipText,  problemImage,  problemStatNumber,  problemStatText,  processSectionTitle,  processSectionSubtitle,  processSteps[]{    stepNumber,    title,    description  },  processImage,  contactFormTitle,  contactFormSubtitle,  contactFormButtonText,  ctaTitle,  ctaSubtitle}
export type HOMEPAGE_CONTENT_QUERYResult = null;
// Variable: SERVICES_QUERY
// Query: *[  _type == "service"  && status != "inactive"] | order(order asc) {  _id,  title,  slug,  description,  price,  features,  status,  order}
export type SERVICES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  price: string | null;
  features: Array<string> | null;
  status: "active" | "inactive" | "popular" | null;
  order: number | null;
}>;
// Variable: FEATURED_TESTIMONIALS_QUERY
// Query: *[  _type == "testimonial"  && rating >= 4] | order(featured desc, rating desc, dateReceived desc) [0...3] {  _id,  customerName,  location,  text,  rating,  serviceType,  featured,  avatar}
export type FEATURED_TESTIMONIALS_QUERYResult = Array<{
  _id: string;
  customerName: string | null;
  location: string | null;
  text: string | null;
  rating: number | null;
  serviceType: "general" | "hoornaarbestrijding" | "preventieve-behandeling" | "wespenbestrijding" | null;
  featured: "featured" | "standard" | null;
  avatar: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: ALL_TESTIMONIALS_QUERY
// Query: *[  _type == "testimonial"] | order(featured desc, rating desc, dateReceived desc) {  _id,  customerName,  location,  text,  rating,  serviceType,  featured,  dateReceived,  avatar}
export type ALL_TESTIMONIALS_QUERYResult = Array<{
  _id: string;
  customerName: string | null;
  location: string | null;
  text: string | null;
  rating: number | null;
  serviceType: "general" | "hoornaarbestrijding" | "preventieve-behandeling" | "wespenbestrijding" | null;
  featured: "featured" | "standard" | null;
  dateReceived: string | null;
  avatar: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;
// Variable: LOCATIONS_QUERY
// Query: *[  _type == "location"] | order(priority asc) {  _id,  name,  slug,  region,  population,  description,  priority}
export type LOCATIONS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  region: string | null;
  population: string | null;
  description: string | null;
  priority: number | null;
}>;
// Variable: LOCATION_QUERY
// Query: *[  _type == "location"  && slug.current == $slug][0]{  _id,  name,  slug,  region,  population,  description,  localInfo,  serviceHighlights,  nearbyAreas,  localKeywords,  metaTitle,  metaDescription,  featuredImage,  testimonials[]->{    _id,    customerName,    location,    text,    rating,    avatar  }}
export type LOCATION_QUERYResult = {
  _id: string;
  name: string | null;
  slug: Slug | null;
  region: string | null;
  population: string | null;
  description: string | null;
  localInfo: string | null;
  serviceHighlights: Array<string> | null;
  nearbyAreas: Array<string> | null;
  localKeywords: Array<string> | null;
  metaTitle: string | null;
  metaDescription: string | null;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  testimonials: Array<{
    _id: string;
    customerName: string | null;
    location: string | null;
    text: string | null;
    rating: number | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }> | null;
} | null;
// Variable: LOCATION_SLUGS_QUERY
// Query: *[  _type == "location"  && defined(slug.current)]{  "slug": slug.current}
export type LOCATION_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: HOME_PAGE_QUERY
// Query: {  "siteSettings": *[_type == "siteSettings"][0]{    companyName,    tagline,    phoneNumber,    email,    availability,    guaranteeText,    experienceYears,    customerCount,    averageRating,    logo  },  "homepageContent": *[_type == "homepageContent"][0]{    heroTitle,    heroSubtitle,    heroImage,    features[]{      icon,      title,      description    },    problemSectionTitle,    problemParagraphs,    problemTipTitle,    problemTipText,    problemImage,    problemStatNumber,    problemStatText,    processSectionTitle,    processSectionSubtitle,    processSteps[]{      stepNumber,      title,      description    },    processImage,    contactFormTitle,    contactFormSubtitle,    contactFormButtonText,    ctaTitle,    ctaSubtitle  },  "services": *[    _type == "service"    && status != "inactive"  ] | order(order asc) {    _id,    title,    slug,    description,    price,    features,    status  },  "testimonials": *[    _type == "testimonial"    && rating >= 4  ] | order(featured desc, rating desc, dateReceived desc) [0...3] {    _id,    customerName,    location,    text,    rating,    avatar  }}
export type HOME_PAGE_QUERYResult = {
  siteSettings: {
    companyName: string | null;
    tagline: string | null;
    phoneNumber: string | null;
    email: string | null;
    availability: string | null;
    guaranteeText: string | null;
    experienceYears: number | null;
    customerCount: string | null;
    averageRating: number | null;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  homepageContent: null;
  services: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
    description: string | null;
    price: string | null;
    features: Array<string> | null;
    status: "active" | "inactive" | "popular" | null;
  }>;
  testimonials: Array<{
    _id: string;
    customerName: string | null;
    location: string | null;
    text: string | null;
    rating: number | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  }>;
};
// Variable: CONTACT_SUBMISSIONS_QUERY
// Query: *[  _type == "contactSubmission"] | order(submissionDate desc) {  _id,  name,  phone,  email,  location,  problemDescription,  urgency,  status,  submissionDate,  assignedTo}
export type CONTACT_SUBMISSIONS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  phone: string | null;
  email: string | null;
  location: string | null;
  problemDescription: string | null;
  urgency: "emergency" | "non-urgent" | "standard" | "urgent" | null;
  status: "cancelled" | "completed" | "contacted" | "new" | "scheduled" | null;
  submissionDate: string | null;
  assignedTo: string | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[\n  _type == \"siteSettings\"\n][0]{\n  _id,\n  companyName,\n  tagline,\n  phoneNumber,\n  email,\n  serviceArea,\n  availability,\n  guaranteeText,\n  experienceYears,\n  customerCount,\n  averageRating,\n  defaultMetaTitle,\n  defaultMetaDescription,\n  logo,\n  socialMediaLinks\n}": SITE_SETTINGS_QUERYResult;
    "*[\n  _type == \"homepageContent\"\n][0]{\n  _id,\n  heroTitle,\n  heroSubtitle,\n  heroImage,\n  features[]{\n    icon,\n    title,\n    description\n  },\n  problemSectionTitle,\n  problemParagraphs,\n  problemTipTitle,\n  problemTipText,\n  problemImage,\n  problemStatNumber,\n  problemStatText,\n  processSectionTitle,\n  processSectionSubtitle,\n  processSteps[]{\n    stepNumber,\n    title,\n    description\n  },\n  processImage,\n  contactFormTitle,\n  contactFormSubtitle,\n  contactFormButtonText,\n  ctaTitle,\n  ctaSubtitle\n}": HOMEPAGE_CONTENT_QUERYResult;
    "*[\n  _type == \"service\"\n  && status != \"inactive\"\n] | order(order asc) {\n  _id,\n  title,\n  slug,\n  description,\n  price,\n  features,\n  status,\n  order\n}": SERVICES_QUERYResult;
    "*[\n  _type == \"testimonial\"\n  && rating >= 4\n] | order(featured desc, rating desc, dateReceived desc) [0...3] {\n  _id,\n  customerName,\n  location,\n  text,\n  rating,\n  serviceType,\n  featured,\n  avatar\n}": FEATURED_TESTIMONIALS_QUERYResult;
    "*[\n  _type == \"testimonial\"\n] | order(featured desc, rating desc, dateReceived desc) {\n  _id,\n  customerName,\n  location,\n  text,\n  rating,\n  serviceType,\n  featured,\n  dateReceived,\n  avatar\n}": ALL_TESTIMONIALS_QUERYResult;
    "*[\n  _type == \"location\"\n] | order(priority asc) {\n  _id,\n  name,\n  slug,\n  region,\n  population,\n  description,\n  priority\n}": LOCATIONS_QUERYResult;
    "*[\n  _type == \"location\"\n  && slug.current == $slug\n][0]{\n  _id,\n  name,\n  slug,\n  region,\n  population,\n  description,\n  localInfo,\n  serviceHighlights,\n  nearbyAreas,\n  localKeywords,\n  metaTitle,\n  metaDescription,\n  featuredImage,\n  testimonials[]->{\n    _id,\n    customerName,\n    location,\n    text,\n    rating,\n    avatar\n  }\n}": LOCATION_QUERYResult;
    "*[\n  _type == \"location\"\n  && defined(slug.current)\n]{\n  \"slug\": slug.current\n}": LOCATION_SLUGS_QUERYResult;
    "{\n  \"siteSettings\": *[_type == \"siteSettings\"][0]{\n    companyName,\n    tagline,\n    phoneNumber,\n    email,\n    availability,\n    guaranteeText,\n    experienceYears,\n    customerCount,\n    averageRating,\n    logo\n  },\n  \"homepageContent\": *[_type == \"homepageContent\"][0]{\n    heroTitle,\n    heroSubtitle,\n    heroImage,\n    features[]{\n      icon,\n      title,\n      description\n    },\n    problemSectionTitle,\n    problemParagraphs,\n    problemTipTitle,\n    problemTipText,\n    problemImage,\n    problemStatNumber,\n    problemStatText,\n    processSectionTitle,\n    processSectionSubtitle,\n    processSteps[]{\n      stepNumber,\n      title,\n      description\n    },\n    processImage,\n    contactFormTitle,\n    contactFormSubtitle,\n    contactFormButtonText,\n    ctaTitle,\n    ctaSubtitle\n  },\n  \"services\": *[\n    _type == \"service\"\n    && status != \"inactive\"\n  ] | order(order asc) {\n    _id,\n    title,\n    slug,\n    description,\n    price,\n    features,\n    status\n  },\n  \"testimonials\": *[\n    _type == \"testimonial\"\n    && rating >= 4\n  ] | order(featured desc, rating desc, dateReceived desc) [0...3] {\n    _id,\n    customerName,\n    location,\n    text,\n    rating,\n    avatar\n  }\n}": HOME_PAGE_QUERYResult;
    "*[\n  _type == \"contactSubmission\"\n] | order(submissionDate desc) {\n  _id,\n  name,\n  phone,\n  email,\n  location,\n  problemDescription,\n  urgency,\n  status,\n  submissionDate,\n  assignedTo\n}": CONTACT_SUBMISSIONS_QUERYResult;
  }
}
